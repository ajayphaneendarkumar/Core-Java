Introduction:-
===================
-->java is a class-based ,object-oriented programming language.
-->java is case sensitive programming language.
-->java was developed by James gosling and his team at sun micro Systems in 1991,intitally java named as "oak" in the year 1995 later on it is renamed as java in 1996 and later acquired by oracle corporation.
-->Application of java:-
==========================
  -->java is used in "DESKTOP APPLICATIONS"
  -->"MOBILE APPLICATIONS"
  -->"ENTERPRISE APPLICATIONS"
  -->"WEB APPLICATIONS"
  -->"EMBEDDED SYSTEMS"
  -->"GAMING".
========================================
-->ADVANTAGES OF JAVA:-
==============================
-->java  is a popular and widely used programming language with many advantages.
     -->platform independent -->code can run any jvm installed desktop
     -->object-oriented programming -->deals the data with objects
     -->memory management
     -->security
     -->multi-threading
     -->community support
======================================================================================
-->structure of java:-
--------------------------------
       import java.util.Scanner;
       import java.utilvector;  //import vector class
       import java.io.*;
       import java.util.*;
       import java.util.lang;
       import java.util.Arrays;
       import java.io.BufferedReader;
       import java.io.InputStreamReader;
       public class Sample{
            public static void main(String args[]) //for static method we can access by using class ,for non-static method we can access by
            {                                                                                         creating object.
                 //wirte the logic here
                 System.out.println("HELLO JAVA PROGRAMMING");
            }
      }
===========================================================================
-->object creation:-
         classname obj_name=new classname();
======================================================================
-->READING INPUT:-
  =====================
Scanner class:-
  -->Scanner sc=new Scanner(System.in);
     byte r=sc.nextByte();
     short m=sc.nextShort();
     int n=sc.nextInt();
     long s=sc.nextLong();
     double w=sc.nextDouble();
     float f=sc.nextFloat();
     String q=sc.nextLine();
BufferedReader class:-
    -->InputStreamReader s=new InputStreamReader(System.in);
    -->BufferedReader br=new BufferedReader(s);
       ---->int n = Integer.parseInt(br.readLine());
       --->float f=Float.parseFloat(br.redLine());
===============================================================================
-->To find Number of digits in the given number use this logic: (int)log10(num)+1;
-->TO seperate the digits from first then use the below logic:
        while(num>0)
        {
           int r= num%(int)Math.pow(10,d) ;
           int s=num/(int)Math.pow(10,d);
        }
  ===================================================================================
-->pritning output:-
 ==============================
-->there are 3 ways of printing output.
-->1.System.out.println("HELLO WORLD");
-->2.System.out.println(x);
-->3.System.out.println("THE VALUE OF x IS :"+x);
-----------------------------------------------------------------------------
-->Basic Terminologies of java:-
----------------------------------------------------
Class :- class is a template or blue print for creating  an object.
object:- object is a entity that consists of set of properties and behaviours
properties:- variables-->describes the object
behaviour:- method -->actions performed by the object.
----------------------------------------------------------------------------------
comment Lines in Java:-
================================
1.single line comment:-
 --------------------------
   //System.out.println("This is single comment line");
2.multiple line comment :-
----------------------------------
/* System.out.println("This is multi line comment"); */
=======================================================================================
-->In java programming we need to save the file name with the class name with .java extension
-->compiling the code:-   javac filename.java
-->running the code :-    java  filename/className
==================================================================================================
 java Identifiers:-
====================
--> java identifiers are used for indentification purpose.
-->valid identifiers:-->($,_,[A-Z],[a-z],[0-9])-->but should not start with numbers.
-->Invalid identifiers:-->(@,#,%,-,...)
=====================================================
java Datatypes:-
===========================================================
boolean ->size->1bit  -->boolean boolvar;
byte    ->size->8bits -->byte bytevar;
char    ->size->16-bits-->char charvar;
short    ->size->16-bits-->short shortvar;
int      ->size->32-bits-->int intvar;
long     ->size->64-bits-->long longvar;
float    ->size->32-bits-->float floatvar;
double   ->size->64-bits-->double doublevar;
===============================================================
java operators:-
===================
-->Arithmetic Operators:-(+,-,*,%,/)
-->unary operators:-(-,+,++,--)
-->relational opeartors:-(>,<,>=,<=,==,!=)
-->logical operators:-(&&,||,!)
-->Assignment operators:-(variable=value)
-->Ternary operator:-(condition?if true:if false)
-->bitwise operators:-(&,|,^,>>(right shift),<<(left shift))
=======================================================================
java Strings:-
====================
-->Strings are the type of objects that can store the character of values. A string acts the same as an array of characters in Java.
-->Syntax :-
      string literal:-(<String_type>  <string_variable> = <String_Sequence>)
          String s = "HELLO";
      String using keyword:-
          String s = new String("HELLO");
-->byte[] b_arr={12,13,14,15,16};
   String s= new String(b_arr);
-->String methods:-
   =======================
    String s = "learm share any";
    1)String length:-
          s.length(); --->returns the number of characters in the String.
    2)String concatenate:-
          s1.concat(s2); -->used to concatenate the two strings
    3)String charAt:-
          s.charAt(i);  -->returns the character at the ith index.
    4)String Substring:-
          s.subString(int i);  -->returns the substring from the ith index to the end of string.
    5)String subString:-
          s.subString(int i,int j);  -->returns the substring from the ith index to j-1 index.
    6)int indexOf:-
          s.indexOf("learn");  
    7)int lastIndexOf:-
          s.lastIndexOf("a");
    8)String toLowerCase():-
          s.toLowerCase();      -->returns all caharacters of the string to lower case.
    9)String toUppercase():-
          s.toUpperCase();      -->returns all characters of the string to Upper Case.
    10)String equals(another string):-
          boolean res= s1.equals(s2);       -->return true/false;
    11)String toCharArray():-
          String s=str.toCharArray();
    12)String replace(char old ,char new):-
           s.replace("f" , "g");
    13)string split:-
          s.split("\\s+"); s.split(",");
    14)toString():-
         s.toString() -->used to convert given content to the string.
    15) String trim():-
          string s1=s.trim();
 -------------------------------------------------------------------------------------------------------
-->StringBuffer class in java:-
   ------------------------------
     -->StirngBufffer sb=new StringBuffer();
      methods:-
          String sb=new StringBuffer();
          sb.append("HELLO"); --->used to add ,insert strings at the end of the buffer.
          sb.delete(1,3);     --->used to delete the characters from the buffer.
          sb.reverse();        -->used to reverse the buffer.
          sb.insert(position,string);
          sb.replace(1,3,string);
============================================================================================================================
java Arrays:-
------------------
-->In java all arrays are dynamically allocated.
-->size of the arrays cannot be altered.
-->The size of an array must be specified by int or short value and not long.
-->declaration:-
       int[] Array;
           or 
        int Array[];
        byte[] byteArray;
        short[] shortArray;
        long[] longArray;
        char[] charArray;
        boolean[] booleanArray;
-->intialization:-
        int[] Array=new int[Array.length()];
        byte[] byteArray=new byte[Array.length()];
-->Accessing:-
      for(int i=0;i<Array.length();i++)
       {
           Array[i]=sc.nextInt();
           System.out.println(Array[i]);
       }
-->time complexity :O(n)
-->cloning of Arrays:-(deep of the original array)
 ---------------------------------------------------
     int[] Array1={1,2,3};
     int[] Array2=Array1.clone();
----------------------------------------------------------
-->multidimensional Arrays:-
   ===========================
   syntax:-
       data_type[1st dimension][2nd]......[nth dimension]  array_name ;  //declaration
       array_name=new int[][][]...[];         //intializing
    -->for(int i=0;i<rows;i++)
       {
         for(int j=0;j<cols;j++)
          {
             Array[i][j]=sc.nextInt();
           }
       }
=====================================
--->int min=Integer.MAX_VALUE;
-->int max=Integer.MIN_VALUE;
      if(A[i] < min)
       {
           min=A[i];
        }
       if(A[i]>max)           //min and max elements inthe array.
        {
           max=A[i];
        }
=========================================
-->ARRAYS CLASS:-
   ==================
   Arrays class is a built-in class in java that provides variuos utility methods for working with Arrays.
   Methods:-
        import java.uitl.Arrays;
        int[] Array={1,4,2,5,3,6,9};
       1) Arrays.sort(Array_name);   //sort the elements of the array in ascending order.
       2)int[] index=Arrays.binarySearch(Array_name,value); //search for specific element inthe array using binary search algorithm.
       3)boolean[] equal = Arrays.equals(Array1,Array2); //compares to Arrays for eqaulity.
       4)var list=Arrays.asList(Array_name);  //converts given array into the list.
       5)int[] copy=Arrays.copyOfRange(Array_name,value1,value2); //copies the specified range of Array elements to another Array.
       6)Arrays.fill(Array_name,value); //Fills specific vlue in to the array.
       7)Arrays.toString(Array_name)
==============================================================================================================================================
 COLLECTIONS IN JAVA:-
 ======================
-->java collections are used to store and manage the group of objects.
-->vectors in java:-
  ====================
  -->vector is the legacy implementation of the list interface where it can store array elements in it.
  -->vectors can allow duplicate elements to prserve in it and it is resizable nothing but it can increase or decrease it's size.
     example for using vector in java.
        import java.util.vector;
        public class GFG{
           public static void main(String args[])
           {
               vector<data_type>vector_name = new vector<data_type>();  //declaration of vector
               //adding elements in to the vector.
               vector_name.add(ele);
               //accessing elements of the vector
               data_type variable=vector_name.get(index);
              //iterating vector elements
               for(data_type it : vector_name)
               {
                  System.out.println(it);
               }
               //contains keyword tocheck wether the element present in the vector or not
               vector_name.contains(ele);
            }
        }
====================================================================================================================
--->ARRAYLIST IN JAVA:-
=================================
-->ArrayList is the legacy implementation of the list interface which uses array elements to store in it.
-->declaration:-
     ArrayList<data_type>list = new ArrayList<data_type>();
    //adding elements in to the arrayList.
     list.add(ele);
    //accessing arrayList elements
     data_type vatiable = list.get(index);
    //iterating ArrayList Elements
     for(data_type it: list)
     {
         System.out.println(it);
     }
     -->list.contains(ele); //checks whwether the element present in the ArrayList or not.
=======================================================================================================================
HASHSET in JAVA:-
=====================
