Introduction:-
===================
-->java is a class-based ,object-oriented programming language.
-->java is case sensitive programming language.
-->java was developed by or brainchild of  James gosling and his team(patrick Naughthon,Mike sherdin) at sun micro Systems in 1991.
-->intitally java named as "GreenTalk" later renamed as "oak" .
-->"oak" is renamed as java in the year 1995 and later acquired by oracle corporation.
============================================================================================================================================================================================
--->JAVA Architecture:-
===============================
-->Step-1:  create a java source code file with .java extension
-->step-2:  compile the source code using the java compiler which will creates a bytecode file with .class extension.
-->Step-3:  class loader reads both user defined and library classes into memory for execution.
-->step-4:  bytecode verifier validates all the byte codes are valid.
-->step-5:  jvm(java virtual machine) reads bytecodes and translate into machine code for execution. 
-->jvm is a interpreter which converts bytecode to machine code or machine specific instructions.
==============================================================================================================================
-->Application of java:-
==========================
  -->java is used in "DESKTOP APPLICATIONS"
  -->"MOBILE APPLICATIONS"
  -->"ENTERPRISE APPLICATIONS"
  -->"WEB APPLICATIONS"
  -->"EMBEDDED SYSTEMS"
  -->"GAMING".
========================================
-->ADVANTAGES OF JAVA:-
==============================
-->java  is a popular and widely used programming language with many advantages.
     -->platform independent -->code can run any jvm installed desktop
     -->object-oriented programming -->deals the data with objects
     -->memory management
     -->security
     -->multi-threading
     -->community support
======================================================================================
-->structure of java:-
--------------------------------
       import java.util.Scanner;
       import java.utilvector;  //import vector class
       import java.io.*;
       import java.util.*;
       import java.util.lang;
       import java.util.Arrays;
       import java.io.BufferedReader;
       import java.io.InputStreamReader;
       public class Sample{
            public static void main(String args[]) //for static method we can access by using class ,for non-static method we can access by
            {                                                                                         creating object.
                 //wirte the logic here
                 System.out.println("HELLO JAVA PROGRAMMING");
            }
      }
===========================================================================
-->object creation:-
         classname obj_name=new classname();
======================================================================
-->READING INPUT:-
  =====================
Scanner class:-
  -->Scanner sc=new Scanner(System.in);
     byte r=sc.nextByte();
     short m=sc.nextShort();
     int n=sc.nextInt();
     long s=sc.nextLong();
     double w=sc.nextDouble();
     float f=sc.nextFloat();
     String q=sc.nextLine();
BufferedReader class:-
    -->InputStreamReader s=new InputStreamReader(System.in);
    -->BufferedReader br=new BufferedReader(s);
       ---->int n = Integer.parseInt(br.readLine());
       --->float f=Float.parseFloat(br.redLine());
===============================================================================
-->To find Number of digits in the given number use this logic: (int)Math.log10(num)+1;
-->TO seperate the digits from first then use the below logic:
        while(num>0)
        {
           int r= num/(int)Math.pow(10,d) ;
           num=num%(int)Math.pow(10,d);
        }
 ===================================================================================
-->pritning output:-
 ==============================
-->there are 3 ways of printing output.
-->1.System.out.println("HELLO WORLD");
-->2.System.out.println(x);
-->3.System.out.println("THE VALUE OF x IS :"+x);
while printing the floating point numbers after decimal point print only 2 digits.
float pi=3.142345f;
System.out.println(pi);
-->formating the output:-
System.out.format("%.2f"+pi);
printf("%.2f",pi);
-->final int myNum = 15;
myNum = 20;  // will generate an error: cannot assign a value to a final variable
-----------------------------------------------------------------------------
-->Basic Terminologies of java:-
----------------------------------------------------
Class :- class is a template or blue print for creating  more  objects.
object:- object is a entity that consists of set of properties and behaviours and it is anything that exists physically in the nature.
properties:- variables-->describes the object
behaviour:- method -->actions performed by the object.
----------------------------------------------------------------------------------
comment Lines in Java:-
================================
1.single line comment:-
 --------------------------
   //System.out.println("This is single comment line");
2.multiple line comment :-
----------------------------------
/* System.out.println("This is multi line comment"); */
=======================================================================================
-->In java programming we need to save the file name with the class name with .java extension
-->compiling the code:-   javac filename.java
-->running the code :-    java  filename/className
==================================================================================================
 java Identifiers:-
====================
-->java identifiers are used for indentification purpose.
-->valid identifiers:-->($,_,[A-Z],[a-z],[0-9])-->but should not start with numbers.
-->Invalid identifiers:-->(@,#,%,-,...)
=====================================================
Java Modifiers:-
=======================================================================
-->final ->	Attributes and methods cannot be overridden/modified.
-->Static -> Attributes and methods belongs to a class , rather than object.-->It can be accessed without creating a object.
-->private -->code within the private section is accessible but outside th class not accessible.
-->publiuc -->code inthe public section cna accessed even outside class also.
-->default
-->protected
=====================================================================================================
JAVA DATATYPES:-
==============================================================================================================
boolean ->size->1bit  -->boolean boolvar;
byte    ->size->1byte -->byte bytevar;
char    ->size->16-bits-->char charvar;
short    ->size->2bytes-->short shortvar;
int      ->size->4bytes-->int intvar;
long     ->size->8bytes-->long longvar;
float    ->size->2bytes-->float floatvar;
double   ->size->4bytes-->double doublevar;
-->String, Array,class are Non-primitive datatypes.
===============================================================
java operators:-
===================
-->Arithmetic Operators:-(+,-,*,%,/)
-->unary operators:-(-,+,++,--)
-->relational opeartors:-(>,<,>=,<=,==,!=)
-->logical operators:-(&&,||,!)
-->Assignment operators:-(variable=value, = ,+=,-=,/=,*=,%=,&=,|=,^=,<<=,>>=)
-->Ternary operator:-(condition?if true:if false)
-->bitwise operators:-(&,|,^,>>(right shift),<<(left shift))
=======================================================================
java Strings:-
====================
-->Strings are the type of objects that can store the character of values. A string acts the same as an array of characters in Java.
-->Syntax :-
      string literal:-(<String_type>  <string_variable> = <String_Sequence>)
          String s = "HELLO";
      String using keyword:-
          String s = new String("HELLO");
-->byte[] b_arr={12,13,14,15,16};
   String s= new String(b_arr);
-->String methods:-
   =======================
    String s = "learm share any";
    1)String length:-
          s.length(); --->returns the number of characters in the String.
    2)String concatenate:-
          s1.concat(s2); -->used to concatenate the two strings
    3)String charAt:-
          s.charAt(i);  -->returns the character at the ith index.
    4)String Substring:-
          s.subString(int i);  -->returns the substring from the ith index to the end of string.
    5)String subString:-
          s.subString(int i,int j);  -->returns the substring from the ith index to j-1 index.
    6)int indexOf:-
          s.indexOf("learn");   -->Finding a character in String.
    7)int lastIndexOf:-
          s.lastIndexOf("a");
    8)String toLowerCase():-
          s.toLowerCase();      -->returns all caharacters of the string to lower case.
    9)String toUppercase():-
          s.toUpperCase();      -->returns all characters of the string to Upper Case.
    10)String equals(another string):-
          boolean res= s1.equals(s2);       -->return true/false;
    11)String toCharArray():-
          String s=str.toCharArray();
    12)String replace(char old ,char new):-
           s.replace("f" , "g");
    13)string split:-
          s.split("\\s+"); s.split(",");
    14)toString():-
         s.toString() -->used to convert given content to the string.
    15) String trim():-
          string s1=s.trim();
 -------------------------------------------------------------------------------------------------------
-->StringBuffer class in java:-
   ------------------------------
     -->StirngBufffer sb=new StringBuffer();
      methods:-
          String sb=new StringBuffer();
          sb.append("HELLO"); --->used to add ,insert strings at the end of the buffer.
          sb.delete(1,3);     --->used to delete the characters from the buffer.
          sb.reverse();        -->used to reverse the buffer.
          sb.insert(position,string);
          sb.replace(1,3,string);
============================================================================================================================
JAVA MATH:-
=========================
import java.io.*;
-->Math.max(x,y); //returns the maximum value.
-->Math.min(x,y); //returns the minimum value.
-->Math.abs(x); //returns the absolute value.
-->(int)Math.random()*10;
===================================================================================
JAVA ARRAYS:-
=============================================
-->In java all arrays are dynamically allocated.
-->size of the arrays cannot be altered.
-->The size of an array must be specified by int or short value and not long.
-->declaration:-
       int[] Array;
           or 
        int Array[];
        byte[] byteArray;
        short[] shortArray;
        long[] longArray;
        char[] charArray;
        boolean[] booleanArray;
-->intialization:-
        int[] Array=new int[Array.length()];
        byte[] byteArray=new byte[Array.length()];
-->Accessing:-
      for(int i=0;i<Array.length();i++)
       {
           Array[i]=sc.nextInt();
           System.out.println(Array[i]);
       }
-->time complexity :O(n)
-->cloning of Arrays:-(deep of the original array)
 ---------------------------------------------------
     int[] Array1={1,2,3};
     int[] Array2=Array1.clone();
----------------------------------------------------------
-->multidimensional Arrays:-
   ===========================
   syntax:-
       data_type[1st dimension][2nd]......[nth dimension]  array_name ;  //declaration
       array_name=new int[][][]...[];         //intializing
    -->for(int i=0;i<rows;i++)
       {
         for(int j=0;j<cols;j++)
          {
             Array[i][j]=sc.nextInt();
           }
       }
=================================================================================
--->int min=Integer.MAX_VALUE;
-->int max=Integer.MIN_VALUE;
      if(A[i] < min)
       {
           min=A[i];
        }
       if(A[i]>max)           //min and max elements inthe array.
        {
           max=A[i];
        }
================================================================================================
-->ARRAYS CLASS:-
   ==================
   Arrays class is a built-in class in java that provides variuos utility methods for working with Arrays.
   Methods:-
        import java.uitl.Arrays;
        int[] Array={1,4,2,5,3,6,9};
       1) Arrays.sort(Array_name);   //sort the elements of the array in ascending order.
       2)int[] index=Arrays.binarySearch(Array_name,value); //search for specific element inthe array using binary search algorithm.
       3)boolean[] equal = Arrays.equals(Array1,Array2); //compares to Arrays for eqaulity.
       4)var list=Arrays.asList(Array_name);  //converts given array into the list.
       5)int[] copy=Arrays.copyOfRange(Array_name,value1,value2); //copies the specified range of Array elements to another Array.
       6)Arrays.fill(Array_name,value); //Fills specific value in to the array.
       7)Arrays.toString(Array_name)
==============================================================================================================================================
JAVA METHODS:-
===========================================
-->Method is a block of code which runs when it is called.
-->Method is also called as fucntions.
-->Both Method and Main fucntion should be in one class.
-->we can call the Method Multiple Times.
-->public class Smaple{
        public static void myname(){
              System.out.println("Ajay");     //Method Without Parameters and it is a static Method
        }
        public static void Main(String args[]){
                  myname();
         }
  }
 -->public class Main()
   {
         public static void myName(String s){     //Method with Parameters.
             System.out.println(s);
          }
           public static void main(String[] args) thorws Exception{
                 myName("Ajay");
           }
    }
-->similarly we can wirte this Methods with if-else statments ,for loops ...
-->Method Overloading:-
   ----------------------
   A Method declared  with Same Name But with diferrent parameters.
  example:-
      myfunc(int x);
      myfunc(float y);
      myfunc(double z);
===================================================================================
JAVA OOP:-
============================
-->OOPs Stands for object oriented programming.
-->object-oriented programming is about creating objects that contains both data and Methods.
-->Advantgaes/why we use:-
==========================
-->oop is faster and easier to execute.
-->oop gives clear structure of program.
-->oop makes code easier to maintain and reusable.
-->oop providea security and high efficiency.
=============================================
-->class:- Template or blue print of creating objects.
-->object:- It is an Instance of class or It is a set of properties and behaviours and more over it is physically occurs in nature.
-->To create a class use "class keyword" -->public class Main(){
                                                   int x=5;
                                            }
-->creating of Object:-
    classname objname = new classname();
-->Accessing methods with object :-
       objname.methodname(); //we can pass parameters also if require.
-->we can create multiple classes:-
   example:
       public class Main(){
             int x=5;
       }
      public class second(){
          public static void main(String args[]){
              Main obj= new Main();
              Sytem.out.println(obj.x);
       }
    }
--->Java Class Methods:-
   =======================
-->There are two types of Java Class Maethods they are static and public.
-->static methods can be called without creating or without using object.
-->public methods should be called by using objects.
example:-
  public class Main(){
        static void myMethod()
          {
                System.out.println("Ajay");  //Static Method
          }
         public void myName(){
              System.out.println("Anil");  //Non-static Method
          }
         public static void main(String args[]){
               myMethod();
              Main obj = new Main();
              obj.myName();
        }
  }
-------------------------------------------
JAVA Constructors:-
=====================
-->Constructor is a special member function used to intialize objects.when Object is created constructor get invoked Automatically.
-->The class name and constructor name should br same.
-->constructors can be overLoaded.
-->Constructors doesn't return any values.
-->Constructors shuold be declared under public section and they get executed automatically when object is created.
-->Two Types -->parametrised and default constructors.
-->public class Main(){
      public Main()
       {
          int x=5;             //Constructor Without Parameters.
       } 
       public static void main(String args[]){
             Main myobj = new Main();
             System.out.println(myobj.x);
       }
}
 -->public class Main(){
         int x;
        public Main(int y){
             x=y;                     //Constructor with Parameters.
        }
       public static void main(String args[]){
            Main myobj= new Main(5);
            System.out.println(myobj.x);
        }
   }
-------------------------------------------------------------
-->Encapsulation:-
 ==================
-->The meaning of "Encapsulation" , is to make sure that "Sensitive" data is hidden from users.To Acheive this we need to    
     ->declare calss variables or attributes as Private.
     ->provide public "set" and "get" methods to access and update the value of private variables.
   example:-
  ----------
  public class Main(){
       private String name;
       public String getName(){
           return name;
       }
      public String setName(String myname){
          this.name = myname;
      } 
     public static void main(String args[]){
          Main myobj  = new Main();
          myobj.setName("ajay");
          System.out.println(myobj.getName());
      }
  }
-->Why Encapsulation?
 ------------------------
  -->Better Control of calss Attributes or variables.
  -->class attributes can be made red-only or write only.
 -->Increases security of data.
====================================================================================================
INHERITANCE:-
===================
-->It is possible to inherit attributes and Methods from one class to another class .
-->Inheritance is grouped into two categeories:
       -->derived or sub or child class :- (the class that inherited from another class)
       -->base or super or parent class:- (the class is being inherited)
--->why we use inheritance:->it is useful for  code reusability.
TYPES:-
=======
1.single-level inheritance :- One sub class is extends from super class.
    public class child{
        public int x=2;
    }
    public parent extends child{
         publc int y=5;
         publlic static void main(String args[]){
             parent myobj= new parent();
            System.out.println(myobj.x+" "+myobj.y);
        }
    }
2.multiple inheritance:- Two sub or base classes are inherited or extends from derived  or super class.
     
     
       


