JAVA INTORDUCTION:-
===================
-->java is a class-based ,object-oriented programming language.
-->java is case sensitive programming language.
-->java was developed by or brainchild of  James gosling and his team(patrick Naughthon,Mike sherdin) at sun micro Systems in 1991.
-->intitally java named as "GreenTalk" later renamed as "oak" .
-->"oak" is renamed as java in the year 1995 and later acquired by oracle corporation.
-->Java is one of the most popular programming language in the world.
-->It has more demand inthe current job market.
-->it is easy to learn and simple to use.
=================================================================================================================================================================
JAVA ARCHITECTURE:-
===============================
-->Step-1:  create a java source code file with .java extension
-->step-2:  compile the source code using the java compiler which will creates a bytecode file with .class extension.
-->Step-3:  class loader reads both user defined and library classes into memory for execution.
-->step-4:  bytecode verifier validates all the byte codes are valid.
-->step-5:  jvm(java virtual machine) reads bytecodes and translate into machine code for execution. 
-->jvm is a interpreter which converts bytecode to machine code or machine specific instructions.
-->"JVM" stands for Java Virtual Machine it is a Java interpreter. It is responsible for loading, verifying, and executing the bytecode created in Java.
-->"JRE" stands for Java Run-Time Environment, it is an installed package that provides environment to run java programs on any machine.
-->"JDK" stands for Java Development Kit which provides the environment to develop and execute the java programs.
==================================================================================================================================================================
APPLICATIONS OF JAVA:-
==========================
  -->java is used in "DESKTOP APPLICATIONS"
  -->"MOBILE APPLICATIONS"
  -->"ENTERPRISE APPLICATIONS"
  -->"WEB APPLICATIONS"
  -->"EMBEDDED SYSTEMS"
  -->"GAMING".
===============================================================================================================================================================
ADVANTAGES OR FEATURES OF JAVA:-
==============================
-->java  is a popular and widely used programming language with many advantages.
     -->platform independent -->code can run any jvm installed desktop
     -->object-oriented programming -->deals the data with objects
     -->memory management
     -->security enhancement
     -->multi-threading
     -->community support
     -->Robust-->Garbage Collection and exception handling makes the java programming as Robust.
     -->Architecture Neutral -->it is not depend on the Architecture design.
=============================================================================================================================================================
-->What is meant by "public static void main(String args[])"?
     -->In public static void main(String args[])
              -->public means direct access to the jvm(Java virtual machine).
              -->static means direct access to the jvm(Java virtual machine)  but without creating any object.
              -->void means where as main function does not return anything.
              -->main means, it is callable environment to the java programs  where we can call user defined and pre-defined functions.
              -->As we taking String args[] as arugment it accepts any type of any number of arguments.
=======================================================================================================================================
DIFFERENCE BETWEEN C++ AND JAVA:-
=======================================================
--> C++                                                                JAVA
   ======================                                       =====================================
    1.It is plat-form dependent                                    1.It is plat-from Independent
    2.It is mainly used for system programming                     2.It is mainly useful for application programming
    3.It supports goto statement                                   3.It doesn't supports goto statements
    4.It suports multiple inheritance                              4.It doesn't supports multiple inheritance through class. It is acheived through interfaces.
    5.It supports structures and unions                            5.java doesn't supports structures and unions.
    6.c++ supports pointers and we can write a pointer program     6.java supports pointers internally but we can't pointer program in java.
    7.c++ supoorts operator overloading                            7.java doesn't supports operator overloading.
================================================================================================================================================================
SRTUCTURE OF JAVA PROGRAM:-
===================================
//-->java lib contains all java related packages .
       import java.util.Scanner;
       import java.utilvector;  //import vector class
       import java.io.*;
       import java.util.*;
       import java.util.lang;
       import java.util.Arrays;
       import java.io.BufferedReader;
       import java.io.InputStreamReader;
       public class Sample{
            public static void main(String args[]) //for static method we can access by using class ,for non-static method we can access by
            {                                                                                         creating object.
                 //wirte the logic here
                 System.out.println("HELLO JAVA PROGRAMMING");
            }
      }
================================================================================================================================================================
OBJECT CREATION IN JAVA :-
================================
         classname obj_name=new classname();
======================================================================
READING INPUT:-
=====================
Scanner class:-
  -->Scanner sc=new Scanner(System.in);
     byte r=sc.nextByte();
     short m=sc.nextShort();
     int n=sc.nextInt();
     long s=sc.nextLong();
     double w=sc.nextDouble();
     float f=sc.nextFloat();
     String q=sc.nextLine();
BufferedReader class:-
    -->InputStreamReader s=new InputStreamReader(System.in);
    -->BufferedReader br=new BufferedReader(s);
       ---->int n = Integer.parseInt(br.readLine());
       --->float f=Float.parseFloat(br.redLine());
=================================================================================================================================
-->To find Number of digits in the given number use this logic: (int)Math.log10(num)+1;
-->TO seperate the digits from first then use the below logic:
        while(num>0)
        {
           int r= num/(int)Math.pow(10,d) ;
           num=num%(int)Math.pow(10,d);
        }
 ==========================================================================================================================================================
PRINTING OUTPUT:-
 ==============================
-->there are 3 ways of printing output.
-->1.System.out.println("HELLO WORLD");
-->2.System.out.println(x);
-->3.System.out.println("THE VALUE OF x IS :"+x);
while printing the floating point numbers after decimal point print only 2 digits.
float pi=3.142345f;
System.out.println(pi);
-->formating the output:-
System.out.format("%.2f"+pi);
printf("%.2f",pi);
-->final int myNum = 15;
myNum = 20;  // will generate an error: cannot assign a value to a final variable
-==========================================================================================================================================================
COMMENT LINES IN JAVA:-
================================
1.single line comment:-
 --------------------------
   //System.out.println("This is single comment line");
2.multiple line comment :-
----------------------------------
/* System.out.println("This is multi line comment"); */
=======================================================================================
-->In java programming we need to save the file name with the class name with .java extension
-->compiling the code:-   javac filename.java
-->running the code :-    java  filename/className
==============================================================================================================================================================
 JAVA IDENTIFIERS:-
============================
-->java identifiers are used for indentification purpose.
-->valid identifiers:-->($,_,[A-Z],[a-z],[0-9])-->but should not start with numbers.
-->Invalid identifiers:-->(@,#,%,-,...)
======================================================================================================================================================
JAVA MODIFIERS:-
=======================================================================
-->final    ->final Attributes and methods cannot be overridden/modified , for final class inheritance cannot be possible.
-->Static  -> Attributes and methods belongs to a class , rather than object.-->It can be accessed without creating a object.
-->private -->code within the private section is accessible but outside the class not accessible.
-->public  -->code in the public section can accessed even outside the class also.
-->default --> The class is only accessible by classes of same package.(package is nothing but  collection of classes).
-->protected -->code acessible in both parent and child classes. 
=================================================================================================================================================================
JAVA DATATYPES:-
==========================================================
boolean ->size->1bit  -->boolean boolvar;
byte    ->size->1byte -->byte bytevar;
char    ->size->16-bits-->char charvar;
short    ->size->2bytes-->short shortvar;
int      ->size->4bytes-->int intvar;
long     ->size->8bytes-->long longvar;
float    ->size->2bytes-->float floatvar;
double   ->size->4bytes-->double doublevar;
-->String, Array,class are Non-primitive datatypes.
=================================================================================================================================================================
JAVA TYPECASTING:-
====================
-->Type casting is nothing but when we assign a value of one primitive data_type to another data_type.
-->there are two typesof type casting they are:
      1.Widening type casting(Automatic) :-  converts smaller data_type to larger data_type size.
         byte -> short -> char -> int -> long -> float -> double.
      2.Narrowing type casting(Manual) :- converts  larger data_type to smaller data_type size
         double -> float -> long -> int -> char -> short -> byte.
-->Example for automatic or widening :-
          int myInt = 9;
          int mydouble = myInt;
-->Example for manual or narrowing:-
          int myDouble = 9.0;
          int myInt = (int)myDouble;
==================================================================================================================================================================
JAVA OPERATORS:-
===================
-->Arithmetic Operators:-(+,-,*,%,/)
-->unary operators:-(-,+,++,--)
-->relational opeartors:-(>,<,>=,<=,==,!=)
-->logical operators:-(&&,||,!)
-->Assignment operators:-(variable=value, = ,+=,-=,/=,*=,%=,&=,|=,^=,<<=,>>=)
-->Ternary operator:-(condition?if true:if false)
-->bitwise operators:-(&,|,^,>>(right shift),<<(left shift))
-->Literals are used to store binary data or hexadecimal data or all type of binary values.
====================================================================================================
JAVA STRINGS:-
====================
-->Strings are the type of objects that can store the character of values. A string acts the same as an array of characters in Java.
-->Syntax :-
      string literal:-(<String_type>  <string_variable> = <String_Sequence>)
          String s = "HELLO";
      String using keyword:-
          String s = new String("HELLO");
-->byte[] b_arr={12,13,14,15,16};
   String s= new String(b_arr);
-->STRING METHODS:-
   ===========================================
    String s = "learm share any";
    1)String length:-
          "System.out.println(s.length());" --->returns the number of characters in the String.
    2)String concatenate:-
         "s1=s1.concat(s2);" -->used to concatenate the two strings
    3)String charAt:-
          "System.out.println(s.charAt(i));"  -->returns the character at the ith index.
    4)String Substring:-
         " System.out.println(s.subString(int i));"  -->returns the substring from the ith index to the end of string.
    5)String subString:-
         " System.out.println(s.subString(int i,int j));"  -->returns the substring from the ith index to j-1 index.
    6)int indexOf:-
          "System.out.println(s.indexOf(ch));"   -->Finding a index of character in String.
    7)int lastIndexOf:-
          "System.out.println(s.lastIndexOf("a"));" -->Finding last indexof character in the string.
    8)String toLowerCase():-
         " System.out.println(s.toLowerCase());"      -->returns all caharacters of the string to lower case.
    9)String toUppercase():-
          "System.out.println(s.toUpperCase());"      -->returns all characters of the string to Upper Case.
    10)String equals(another string):-
         " boolean res= s1.equals(s2);"       -->return true/false;
    11)String toCharArray():-
          "char[] s=str.toCharArray();"
    12)String replace(char old ,char new):-
           "System.out.println(s.replace("f" , "g"));"
    13)string split:-
          "s.split("\\s+");" s.split(","); // for example String[] s = s1.split(",");
    14)toString():-
        String s1 = s.toString() -->used to convert given content to the string.
    15) String trim():-
          string s1=s.trim();
    16) "Character.isDigit(ch);" -->it will return true or false based on it is digit or not.
    17) "Character.getNumericValue(ch);" 
=================================================================================================================================================================
STRING BUFFER / STRING BUILDER IN JAVA:-
=========================================================
-->String buffer is used to protect threads.
-->where as String builder doesn't protect threads.
     -->StirngBufffer sb=new StringBuffer();
      methods:-
          String sb=new StringBuffer();
          sb.append("HELLO"); --->used to add ,insert strings at the end of the buffer.
          sb.delete(1,3);     --->used to delete the characters from the buffer.
          sb.reverse();        -->used to reverse the buffer.
          sb.insert(position,string);
          sb.replace(1,3,string);
=================================================================================================================================================================
JAVA MATH:-
=========================
import java.io.*;
-->Math.max(x,y); //returns the maximum value.
-->Math.min(x,y); //returns the minimum value.
-->Math.abs(x); //returns the absolute value.
-->(int)Math.random()*10; //return the random values.
===============================================================================================================================================================
JAVA ARRAYS:-
=============================================
-->In java all arrays are dynamically allocated.
-->size of the arrays cannot be altered.
-->The size of an array must be specified by int or short value and not long.
-->declaration:-
       int[] Array;
           or 
        int Array[];
        byte[] byteArray;
        short[] shortArray;
        long[] longArray;
        char[] charArray;
        boolean[] booleanArray;
-->intialization:-
        int[] Array=new int[Array.length()];
        byte[] byteArray=new byte[Array.length()];
-->Accessing:-
      for(int i=0;i<Array.length();i++)
       {
           Array[i]=sc.nextInt();
           System.out.println(Array[i]);
       }
-->time complexity :O(n)
-->cloning of Arrays:-(deep of the original array)
 ---------------------------------------------------
     int[] Array1={1,2,3};
     int[] Array2=Array1.clone();
----------------------------------------------------------
-->multidimensional Arrays:-
   ===========================
   syntax:-
       data_type[1st dimension][2nd]......[nth dimension]  array_name ;  //declaration
       array_name=new int[][][]...[];         //intializing
    -->for(int i=0;i<rows;i++)
       {
         for(int j=0;j<cols;j++)
          {
             Array[i][j]=sc.nextInt();
           }
       }
===============================================================================================================================================================
--->int min=Integer.MIN_VALUE;
-->int max=Integer.MAX_VALUE;
      if(A[i] < min)
       {
           min=A[i];
        }
       if(A[i]>max)           //min and max elements inthe array.
        {
           max=A[i];
        }
==============================================================================================================================================================
ARRAYS CLASS:-
==================
  -->Arrays class is a built-in class in java that provides variuos utility methods for working with Arrays.
   Methods:-
        import java.uitl.Arrays;
        int[] Array={1,4,2,5,3,6,9};
       1) Arrays.sort(Array_name);   //sort the elements of the array in ascending order.
       2)int[] index=Arrays.binarySearch(Array_name,value); //search for specific element inthe array using binary search algorithm.
       3)boolean[] equal = Arrays.equals(Array1,Array2); //compares to Arrays for eqaulity.
       4)var list=Arrays.asList(Array_name);  //converts given array into the list.
       5)int[] copy=Arrays.copyOfRange(Array_name,value1,value2); //copies the specified range of Array elements to another Array.
       6)Arrays.fill(Array_name,value); //Fills specific value in to the array.
       7)Arrays.toString(Array_name)
==============================================================================================================================================
JAVA METHODS:-
===========================================
-->Method is a block of code which runs when it is called.
-->Method is also called as fucntions.
-->Both Method and Main fucntion should be in one class.
-->we can call the Method Multiple Times.
-->public class Smaple{
        public static void myname(){
              System.out.println("Ajay");     //Method Without Parameters and it is a static Method
        }
        public static void Main(String args[]){
                  myname();
         }
  }
 -->public class Main()
   {
         public static void myName(String s){     //Method with Parameters.
             System.out.println(s);
          }
           public static void main(String[] args) thorws Exception{
                 myName("Ajay");
           }
    }
-->similarly we can wirte this Methods with if-else statments ,for loops ...
-->Method Overloading:-
   ----------------------
   A Method declared  with Same Name But with diferrent parameters.
  example:-
      myfunc(int x);
      myfunc(float y);
      myfunc(double z);
===================================================================================
JAVA RECURSION:-
==================
-->Recursion is the technique of making a function call itself. This Technique provides a way to break down complicated problems into simple problems which are easier to solve.
Example:-
  public class Main{
      public static void main(String args[]){
           Scanner s = new Scanner(System.in);
           int num=s.nextInt();
           int res= sum(num); 
          System.out.println(res);
     }
     public static int sum(int n){ 
          if(n>0){
               return n+sum(n-1);
          }
           else
            {
              return 0;
            }
     }
  }
==================================================================================================================================================================
JAVA OOPS:-
============================
-->OOPs Stands for object oriented programming.
-->object-oriented programming is about creating objects that contains both data and Methods.
-->Advantgaes/why we use:-
==========================
-->oop is faster and easier to execute.
-->oop gives clear structure of program.
-->oop makes code easier to maintain and reusable.
-->oop provides security and high efficiency.
=============================================
-->class:- Template or blue print of an objects.
-->In java ,by default class is always extends from object.
-->object:- It is an Instance of class which has set of properties and behaviours and more over it is physically occurs in nature.
-->To create a class use "class keyword" --> class Main{
                                                 public int x=5;
                                            }
-->creating of Object:-
    classname objname = new classname();
-->Accessing methods with object :-
       objname.methodname(); //we can pass parameters also if require.
-->we can create multiple classes:-
   example:
       public class Main(){
             int x=5;
       }
      public class second(){
          public static void main(String args[]){
              Main obj= new Main();
              Sytem.out.println(obj.x);
       }
    }
===============================================================================================================================================================
JAVA CLASS METHODS:-
=======================
-->There are two types of Java Class Methods they are static and public.
-->static methods can be called without creating or without using object.
-->public methods should be called by using objects.
example:-
  public class Main(){
        static void myMethod()
          {
                System.out.println("Ajay");  //Static Method
          }
         public void myName(){
              System.out.println("Anil");  //Non-static Method
          }
         public static void main(String args[]){
               myMethod();
              Main obj = new Main();
              obj.myName();
        }
  }
=================================================================================================================================================================
JAVA CONSTRUCTORS:-
=====================
-->Constructor is a special member function which is used to intialize objects.when Object is created constructor get invoked Automatically.
-->The class name and constructor name should be same.
-->constructors can be overLoaded.
-->Constructors doesn't return any values.
-->Constructors does not have any return datatypes.
-->Constructors shuold be declared under public section and they get executed automatically when object is created.
-->Two Types -->parametrised and default constructors.
-->public class Main{
      public Main()
       {
          int x=5;             //Constructor Without Parameters.
       } 
       public static void main(String args[]){
             Main myobj = new Main();
             System.out.println(myobj.x);
       }
}
 -->public class Main(){
         int x;
        public Main(int y){
             x=y;                     //Constructor with Parameters.
        }
       public static void main(String args[]){
            Main myobj= new Main(5);
            System.out.println(myobj.x);
        }
   }
=================================================================================================================================================================
SUPER AND THIS KEYWORDS:-
================================
let us discuss super keyword by using an example program.
class A extends object{  // class is by default extends from object
  public A(){
    super();
    System.out.println("In A");         //super() key word will call the super class first and then  calls derived or sub class.
 }
 public A(int n){
    this();                            // this keyword is used to call the constructor of the same class.
    super();
    System.out.println(n:+"In A int");
 }
}
class B extends A{
    public B(){
        super();
       System.out.println("In B");
  }
 public B(int n){
     this();
     super(n);
     System.out.println(n: + "In B int");
}
}
class Main{
   public static void main(String args[]){
       B myobj= new B(); // it will call class A default constructor and class B default constructor.
       B myobj= new B(6); // it will call class B parameterised constructor and class A default constructuor and to call class A parameterised constructor pass the value in to super keyword.
  }
}
================================================================================================================================================================      
ENCAPSULATION:-
=======================
-->The meaning of "Encapsulation" , is to make sure that "Sensitive" data is hidden from users.To Acheive this we need to    
     ->declare calss variables or attributes as Private.
     ->provide public "set" and "get" methods to access and update the value of private variables.
                                   OR
-->The process of wrapping code and data together in to a single unit is called Encapsulation.
-->Types:  function encapsulation, calss encapsulation, member variable encapsulation
   example:-
  ===================
  public class Main{
       private String name;
       public String getName(){
           return name;
       }
      public String setName(String name){
          this.name = name;  //use this keyword
      } 
     public static void main(String args[]){
          Main myobj  = new Main();
          myobj.setName("ajay");
          System.out.println(myobj.getName());
      }
  }
-->Why Encapsulation?
 =============================
-->Better Control of calss Attributes or variables.
-->class attributes can be made red-only or write only.
-->Increases security of data.
=================================================================================================================================================================
INHERITANCE:-
===================
-->It is possible to inherit attributes and Methods from one class to another class .
-->Inheritance is grouped into two categeories:
       -->derived or sub or child class :- (the class that inherited from another class)
       -->base or super or parent class:- (the class is being inherited)
--->why we use inheritance:->it is useful for  code reusability.
TYPES:-
=======
1.single-level inheritance :- One sub class is extends from super class.
===========================================================================
                               A(Baseclass)
                                 |
                               B(Derived class)
Example:-
===========
     class parent{
        public int x=2;
    }
    class child extends parent{
         public int y=5;
         public static void main(String args[]){
             child myobj= new child();
            System.out.println(myobj.x+" "+myobj.y);
        }
    }
-----------------------------------------------------------
2.Multilevel Inheritance:- one class is inherited from another class , which is already exteded from another class.
====================================================================================================================
                        A(Base class)
                         |
                        B(Intermediate class)
                         |
                        C(Derived class)
Example:-
============
   class parent1{
      public int x=2;
    }
    class child1 extends parent1{
        public int y=3;
    }
    class child2 extends child1 {
        public int z=8;
      public static void main(String args[]){
          child2 myobj = new child2();
         System.out.println(myobj.x+" "+myobj.y+" " + myobj.z);
       }
    }
-->heirarchial Inheritance:-(Two derived class and one parent class those two derived classes are extended from one base class)
==============================================================================================================================
                              A(Base Class)
                              |
                            -   -
                           |      |
                    B(Derived)    C(Derived)
Example:-
===========
-->class parent{
      }
  class child1 extends parent{
  }
  class child2 extends parent{
  }
  class Main{
     public static void main(String args[]){
            child1 obj1 = new child1();
            child2 obj2 = new child2();
      }
 }
=======================================================================================
  Hybrid inheritance and multiple inheritance can be achieved by java interfaces.
 -->Hybrid inheritance is the combination of two or more types of inheritances.
Advantages:-
===========
--->code reusability
--->Abstraction
--->Method overriding
--->class heirarchy
--->polymorphism 
========================================================================================================================================
ABSTRACTION:-
==========================================
-->Abstraction is the process of "hidding certain details" and "showing only essential information to the user."
-->Abstraction can be acheived with either abstract classes or interfaces.
-->Abstract class:- It is a restricted class that cannot be used to create objects(to access it , it must be inherited from another class)
-->Abstract method:- It can be only used in abstract class and it has no body.
Example:-
---------
abstract class animal{     //abstract class
     public abstract void myanimal();     //abstract method
     public void sample(){
          System.out.println("hello Animal");  //regular method
     }
}
class forest extends animal{
     public void myanimal(){
          //The body of the abstract method is used here or provided here
        System.out.println("Hello Tiger");
     }
}
class Main{
 public static void main(String args[]){
     forest f=new forest();
     f.myanimal();
     f.sample();
   }
}
===============================================================================================================
POLYMORPHISM:-
==================================
-->polymorphism means "many forms" and it occurs when  we have many classes that are related to each other by inheritance.
-->we can re-use attributes and methods of already existing class when a new class is created.
-->There are two of polymorphism they are run time and compile time polymorphisms.
-->public class Animal{
      public void Myanimal(){
         System.out.println("I am a Animal");
       }
   }
   class pig extends Animal{
        public void Myanimal(){
          System.out.println("The pig sounds as: pee pee ");
        }
   }
   class Main{
        public static void main(String args[]){
            Animal myobj = new Animal();
            myobj.Myanimal();
            Animal myobj1 = new pig();
            myobj1.Myanimal();
        }
   }
============================================================================================================
DIFFERENCE BETWEEN COMPILE TIME AND RUN TIME POLYMORPHISMS:-
=================================================================
-->compile-time polymorphism:-
==============================
-->Whenever an object is bound with it's functionality at compile time that is known as compile time polymorphism.
 -->This can be acheived by method-overloading -->method overloading says that it can have more than one fucntion with same name but different parameters in a class.
Example:-
========
class Main{
    public int add(int x , int y){
         return x+y;
    }
  public double add(double x , double y){
         return x+y;
   }
  public static void main(String args[]){
      Main myobj = new Main();
      myobj.add(3,4);
      myobj.add(5.80,6.89);
   }
}
==================================================================================================================================================================
-->Run-Time polymorphism:-
  ===========================
-->Whenever an object bound it's functionality at run-time that is known as run-time polymorphism.
-->This can be acheived by method overriding-->method overding means when a function or method in parent is declared same as in child class.
Example:-
===========
class parent{
  static void myMethod(){
       System.out.println("Method 1");
 }
}
class child extends parent{
     static void myMethod(){
       system.out.pintln("Method 2");
     }
   public static void main(String args[]){
           myMethod();
    }
 }
================================================================================================================================================================
INTERFACE IN JAVA:-
====================================
-->Another way to acheive "Abstraction" in java is with interfaces.
-->An "Interface" is a completely "Abstract Class" that is used to group related methods with no body.
-->Example:-
   interface animal{
        public void animalsound(){}
        public void sleep(){}
   }
  class pig extends animal{
        public void animalsound(){
           System.out.println("pig sound as zeeeg");  //abstract method body
        }
         public void sleep(){
             System.out.println("pig sleep as zooo"); //abstract method body
        }
 }
 class Main{
       public static void main(String args[]){
              pig mypig= new pig();
              mypig.animalsound();
              mypig.sleep();
      }
}
-->Similarly multiple interfaces can be developed.
==================================================================================================================================================================
COLLECTIONS IN JAVA:-
=====================
-->These provides below shown methods.
-->"Collections.sort(arr_name or list_name); " -->It is used to sort the elements of array or list.
-->"Collections.copy(arr1,arr2) ;" -->It is used to copy elements from one array to another array. 
-->"Collections.swap(arr,index1,index2);" --">It is used to swap elements of the array.
-->"Collections.reverse(arr);" -->It is used to reverse  elements of the array.
-->"Collections.frequency(arr,ele);"
-->"Collections.max(arr);" -->It is used to find maximum element of the array.
-->"Collections.min(arr);" -->It is used to find minimum element of the array.
-->"Collections.shuffle(arr);"  -->It will rearrange all the elements of the array.
-->"Collections.replaceAll(arr, old_value, new_value);"
-->"Collections.binarySearch(arr,ele);"
-->"Collections.rotate(arr,how_many_rotations);
so these are some the important methods they can be by using collections. 
==================================================================================================================================================================
COLLECTION FRAME WORK IN JAVA:-
==================================
-->following are some of the collection data structures in java.
-->They are:-
        -->ArrayList
        -->HashMap
        -->HashSet
        -->LinkedList
        -->
JAVA ARRAYLIST:-
====================
-->The "ArrayList" class is a  resizable array which can be found in the java.util package.
-->The difference between  "built-in array" and "ArrayList" is that for the built array we cannot add or remove elements to/from the built-in array whereas for ArrayList the elements can be added or removed at any place or position.
-->SYNTAX:-
      import java.util.ArrayList;
      ArrayList<data_type> ArrayName = new ArrayList<data_type>();
-->SOME OF THE USEFUL METHODS THAT ARRAYLIST CLASS HAS:-
   -->"A.add(ele);"  -->it is used to add elements in to the arraylist.
   -->"A.add(index, ele);" -->it is used to add element at the specific position in the list.
   -->"A.get(i);"  -->it is used to access elements inthe arraylist.
   -->"A.set(index, ele);" -->it is used to replace elements at particular position in the arraylist.
   -->"A.remove(index);" -->it is used to remove element at particular index in the arraylist.
   -->"A.index(ele); -->it will return index of the specific element.
   -->"A.clear();" -->it will entire arraylist.
   -->"A.size();" -->it will print size of the arraylist.
   -->"A.contains(ele);" -->it will checck for whether the element exits or not.
   -->"A.isEmpty();" -->it will true or false based on whether the ArrayList is empty or not.
for(int i=0;i<A.size();i++){
    System.out.println(A.get(i));
 }
for(int x:A){
 system.out.println(x);
}
=================================================================================================================================================================
JAVA HASHMAP:-
==============
-->java HashMap is used to store elements as key/value pairs.
-->it does not allows duplicate elements and it return elements in sorted order.
SYNTAX:-
=======
import java.util.HashMap;
HashMap<data_type1, data_type2> Hashmap_Name =  new HashMap<data_type1, data_type2>();
-->Following are some of the java HashMap Class methods they are:
   -->"HashMap.put(key,value);" -->it is used to add elements in to the map.
   -->"HasMap.get(key);" -->it is used to access Hashmap values by taking key as reference.
   -->"HasMap.remove(key);" -->it is used to remove values with specific keys.
   -->"HasMap.size();" -->it will return size of map.
   -->"HasMap.clear();" -->it will clear/delete entire HasMap.
   -->"HashMap.containsKey(key);" -->it will check whether the value exits in the map or not.
-->for(data_type ele : HasMap.keySet()){
       system.out.println(ele); //prints keys
       System.out.println(i+ " " + HashMap.get(ele)); //prints keys , values
   }
-->for(data_type ele: HashMap.values()){
      System.out.println(ele); //prints values
   }
==================================================================================================================================================================
 JAVA HASHSET:-
==================
-->It is used to store collection of items where every item is unique and it can found in java.util package.
SYNTAX:-
=======
import java.util.HashSet;
 HashSet<data_type> HashSet_Name = new HashSet<data_type>();

-->Following are some of the useful methods that HashSet has:-
     -->"HashSet.add(ele);" --> it is used to add elements in to the Hashset.
     -->"HashSet_Name.Contains(ele);" -->it will check whether the element present in the set or not.
     -->"HashSet_Name.size();" -->it will return size of the set.
     -->"HashSet_Name.clear();" -->it will delete entire set at a time.
     -->"HashSet_Name.remove(ele);" -->it will remove specific element in the HashSet.
     -->"HashSet_Name.isEmpty();" -->return true or false  based on whether the HashSet is empty or not.
-->for(int i : HashSet_Name) {
         System.out.println(i);
    }
==================================================================================================================================================================
JAVA LINKEDLIST:-
====================
-->java is LinkedList Class is same as Java ArrayList Class both are having same methods to perform operations.
-->The difference between ArrayList and LinkedList are insertion and deletion and faster in LinkedList when compared to ArrayList.
SYNTAX:-
========
import java.util.LinkedList;
LinkedList<data_type> L = new LinkedList<data_type>();
-->Following are some of the useful methods that LinkedList has:-
     -->"L.add(ele);" 
     -->"L.add(index,ele);"
     -->"L.get(i);" 
     -->"L.size();"
     -->"L.set(i,ele);"
     -->"L.remove(i);" 
     -->"L.clear();"
     -->"L.contians(ele);"
     -->"L.isEmpty();"
     -->"L.addFirst();" -->adds an item to the beginning of the  list.
     -->"L.addLast();"  -->adds an item to the end of the list.
     -->"L.removeFirst();" -->removes an item from the begging of the list.
     -->"L.removeLast();" -->removes an item from the end of the list.
     -->"L.getFirst();" -->get an item at the beginning of the list.
     -->"L.getLast();" -->get an item at the end of the list.
=================================================================================================================================================================

  
    
     
     
       


